{"version":3,"sources":["assets/loader.gif","components/Header.jsx","components/DataLoad.jsx","components/Body.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","style","margin","role","aria-label","DataLoad","props","cocktailData","src","strDrinkThumb","alt","height","width","strDrink","strCategory","strAlcoholic","strGlass","strInstructions","IngredientArray","map","ingredient","key","item","amount","Body","state","isLoading","getData","setState","fetch","then","res","json","data","formatIngredients","_","forOwn","value","ing","id","includes","substring","length","push","i","index","findIndex","temp","val","trim","splice","this","onClick","loaderImage","hidden","Component","App","location","changeHandler","event","target","handleClick","console","log","onChange","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcf8a586.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.85f18fbc.gif\";","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  const styles = {\r\n    margin: \"10px auto\"\r\n  };\r\n  return (\r\n    <div\r\n      className=\"card p-2 w-50 bg-primary text-center text-white\"\r\n      style={styles}\r\n    >\r\n      <h3>\r\n        <span role=\"img\" aria-label=\"cocktailImg\">\r\n          üç∏\r\n        </span>{\" \"}\r\n        Random Cocktail App{\" \"}\r\n        <span role=\"img\" aria-label=\"cocktailImg\">\r\n          üç∏\r\n        </span>\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nconst DataLoad = props => {\r\n  let { cocktailData } = props;\r\n  const styles = {\r\n    height: \"100px\",\r\n    width: \"100px\"\r\n  };\r\n  return (\r\n    <div className=\"card p-4 bg-dark mt-4\">\r\n      <div className=\"row\">\r\n        <div className=\"col-2 m-3 p-2\">\r\n          <img\r\n            className=\"card p-2 rounded\"\r\n            src={cocktailData.strDrinkThumb}\r\n            alt=\"Cocktail\"\r\n            style={styles}\r\n          />\r\n        </div>\r\n        <div className=\"col m-3 p-2 card\">\r\n          <h3>Name : </h3>\r\n          <h2>{cocktailData.strDrink}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col m-1 p-2 card\">\r\n          <h5>Category : </h5>\r\n          {cocktailData.strCategory}\r\n        </div>\r\n        <div className=\"col m-1 p-2 card\">\r\n          <h5>Is Alcoholic : </h5>\r\n          {cocktailData.strAlcoholic}\r\n        </div>\r\n        <div className=\"col m-1 p-2 card\">\r\n          <h5>Glass Used : </h5>\r\n          {cocktailData.strGlass}\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col m-1 p-2 card\">\r\n          <h5>Instructions : </h5>\r\n          {cocktailData.strInstructions}\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col m-1 mt-3 p-2 card text-center\">\r\n          <h5>Ingredients</h5>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        {cocktailData.IngredientArray.map(ingredient => (\r\n          <div className=\"col m-1 p-2 card\" key={ingredient.item}>\r\n            <h5>{ingredient.item} : </h5>\r\n            {ingredient.amount}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataLoad;\r\n","import React, { Component } from \"react\";\r\nimport DataLoad from \"./DataLoad\";\r\nimport loaderImage from \"../../src/assets/loader.gif\";\r\nimport _ from \"lodash\";\r\n\r\nclass Body extends Component {\r\n  state = {\r\n    cocktailData: null,\r\n    isLoading: false\r\n  };\r\n\r\n  getData = () => {\r\n    this.setState({ isLoading: true });\r\n    const url = `https://www.thecocktaildb.com/api/json/v1/1/random.php`;\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        data = data[\"drinks\"][0];\r\n        const IngredientArray = this.formatIngredients(data);\r\n        data.IngredientArray = IngredientArray;\r\n        this.setState({ cocktailData: data, isLoading: false });\r\n      });\r\n  };\r\n  formatIngredients = data => {\r\n    let IngredientArray = [];\r\n    _.forOwn(data, function(value, key) {\r\n      const ing = {\r\n        id: \"\",\r\n        item: \"\",\r\n        amount: \"\"\r\n      };\r\n      if (key.includes(\"strIngredient\") && value !== null) {\r\n        ing.id = key.substring(13, key.length);\r\n        ing.item = value;\r\n        IngredientArray.push(ing);\r\n      }\r\n    });\r\n    _.forOwn(data, function(value, key) {\r\n      if (key.includes(\"strMeasure\") && value !== null) {\r\n        const i = key.substring(10, key.length);\r\n        const index = _.findIndex(IngredientArray, {\r\n          id: i\r\n        });\r\n        const temp = IngredientArray[index].item;\r\n        const val = value.trim();\r\n        IngredientArray.splice(index, 1, { item: temp, amount: val });\r\n      }\r\n    });\r\n    return IngredientArray;\r\n  };\r\n\r\n  render() {\r\n    const { cocktailData } = this.state;\r\n    const styles = {\r\n      height: \"300px\",\r\n      width: \"400px\"\r\n    };\r\n    return (\r\n      <div className=\"container w-75\">\r\n        <div className=\"card p-1 col-3 jumbotron m-auto\">\r\n          <button\r\n            onClick={this.getData}\r\n            className=\"btn btn-sm m-auto col-12 btn-warning font-weight-bold\"\r\n          >\r\n            Get one\r\n            <span role=\"img\" aria-label=\"cocktailImg\">\r\n              üçπ\r\n            </span>\r\n          </button>\r\n        </div>\r\n        {cocktailData !== null ? (\r\n          <DataLoad cocktailData={cocktailData} />\r\n        ) : (\r\n          <div>\r\n            <img\r\n              className=\"loader-image\"\r\n              alt=\"loader\"\r\n              src={loaderImage}\r\n              style={styles}\r\n              hidden={!this.state.isLoading}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    location: \"\"\n  };\n  changeHandler = event => {\n    this.setState({\n      location: event.target.value\n    });\n  };\n  handleClick = data => {\n    console.log(data);\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Body\n          onChange={this.changeHandler}\n          location={this.state.location}\n          handleClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}